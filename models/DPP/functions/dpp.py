import torch
from torch.autograd import Function
from .._ext import dpp
import pdb
import time

class DPPFunction(Function):
    def __init__(ctx, square_size, proposals_per_square, proposals_per_image, spatial_scale):
        ctx.square_size = square_size
        ctx.proposals_per_square = proposals_per_square
        ctx.spatital_scale = spatial_scale
        ctx.output = torch.cuda.FloatTensor()
        ctx.proposals_per_image = proposals_per_image
        ctx.box_plan = torch.Tensor([[-1, -1, 1, 1],
                                      [-2, -2, 2, 2],
                                      [-1, -3, 1, 3],
                                      [-3, -1, 3, 1],
                                      [-3, -3, 3, 3],
                                      [-2, -4, 2, 4],
                                      [-4, -2, 4, 2],
                                      [-4, -4, 4, 4],
                                      [-3, -5, 3, 5],
                                      [-5, -3, 5, 3],  # 10
                                      [-5, -5, 5, 5],
                                      [-4, -7, 4, 7],
                                      [-7, -4, 7, 4],
                                      [-6, -6, 6, 6],
                                      [-4, -8, 4, 8],  # 15
                                      [-8, -4, 8, 4],
                                      [-7, -7, 7, 7],
                                      [-5, -10, 5, 10],
                                      [-10, -5, 10, 5],
                                      [-8, -8, 8, 8],  # 20
                                      [-6, -11, 6, 11],
                                      [-11, -6, 11, 6],
                                      [-9, -9, 9, 9],
                                      [-7, -12, 7, 12],
                                      [-12, -7, 12, 12],
                                      [-10, -10, 10, 10],
                                      [-7, -14, 7, 14],
                                      [-14, -7, 14, 7]])
        ctx.square_num = int(28 / ctx.square_size)  ### it should be 7
        calculate_num = ctx.square_num * ctx.square_num * proposals_per_square
        if ctx.proposals_per_image != calculate_num:
            raise ValueError('the number generated by dpp should be', calculate_num)
        if ctx.square_size != 4 and ctx.square_size != 7:
            raise ValueError('the number of the square for one line should be 4 or 7, but you define:',
                             ctx.square_size)
        if ctx.proposals_per_square > 28:
            raise ValueError('the proposals number for each image should below 28')
        if ctx.spatital_scale != 16:
            raise ValueError('the spatial scale should be 16, but you define is:', ctx.spatital_scale)

    def forward(ctx, features):
        #timer= time.time()
        batch_size, num_channels, data_height, data_width = features.size()
        num_rois = batch_size * ctx.proposals_per_image
        output = torch.FloatTensor(num_rois, 5).fill_(1)
        histogram = torch.FloatTensor(data_height, data_width).fill_(0)
        score_sum = torch.FloatTensor(data_height, data_width).fill_(0)

        if features.is_cuda:
            # print('the DPP is in the cpu form')
            dpp.dpp_forward(ctx.square_size, ctx.proposals_per_square, ctx.proposals_per_image, ctx.spatital_scale,
                            ctx.box_plan, histogram, score_sum, output, features.cpu())
           # print('the dpp forward time is:', time.time() - timer)
            # print('the output of dpp is:', output)
        else:
            dpp.dpp_forward(ctx.square_size, ctx.proposals_per_square, ctx.proposals_per_image, ctx.spatital_scale,
                            ctx.box_plan, histogram, score_sum, output, features)
            # print('the dpp forward time is:', time.time() - timer)
            # print('the output of dpp is:', output)

        return output.cuda()

    def backward(ctx, grad_output):

        return None
